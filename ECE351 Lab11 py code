def zplane (b, a, filename = None ):
    """ Plot the complex z- plane given a transfer function """

    import numpy as np
    import matplotlib . pyplot as plt
    from matplotlib import patches

    ax = plt. subplot (1, 1, 1)
    # create the unit circle
    uc= patches . Circle ((0 ,0) ,radius =1, fill =False , color ='black',ls='dashed')
    ax. add_patch (uc)

    # the coefficients are less than 1, normalize the coefficients
    if np. max(b) > 1:
        kn = np. max(b)
        b = np. array (b)/ float (kn)
    else :
        kn = 1
    if np. max(a) > 1:
        kd = np. max(a)
        a = np. array (a)/ float (kd)
    else :
        kd = 1


    p = np.roots (a)
    z = np.roots (b)
    k = kn/ float (kd)
    # plot the zeros and set marker properties
    t1 = plt.plot (z.real , z.imag , 'o', ms =10 , label ='Zeros')
    plt.setp (t1 , markersize =10.0 , markeredgewidth =1.0)

    # plot the poles and set marker properties
    t2 = plt.plot (p.real , p.imag , 'x', ms =10 , label ='Poles')
    plt.setp ( t2 , markersize =12.0 , markeredgewidth =3.0)

    ax.spines ['left']. set_position ('center')
    ax.spines ['bottom']. set_position ('center')
    ax.spines ['right']. set_visible ( False )
    ax.spines ['top']. set_visible ( False )

    plt.legend ()

    if filename is None :
        plt.show ()
    else :
        plt.savefig ( filename )
    return z, p, k

import scipy.signal as signal
import matplotlib.pyplot as plt
import numpy as np
a = [2,-40,0]
b = [1,-10,16]
z,p,k = zplane(a,b)
print("value of z, p, & k is :{} , {} , {}".format(z,p,k))
w,h =signal.freqz(a, b,whole = True)
plt.subplot(2,1,1)
plt.plot(w, 20*np.log10(abs(h)));plt.title("Magnitude");plt.grid();

z,p,k = signal.residuez(a,b)
print("The result of the residuez function is : {}, {}, {}".format(z,p,k))
angles = np.unwrap(np.angle(h))
plt.subplot(2,1,2);plt.plot(w, angles, 'g');plt.title("Angle");plt.grid();plt.show()