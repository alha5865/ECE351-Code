import numpy as npimport matplotlib.pyplot as pltplt.rcParams.update({'font.size': 14})  steps = 1e-2  t = np.arange(0, 10 + steps, steps)  def func1(t):    y = np.cos(t)    return ysignal = np.zeros(t.shape)def stepfunc(t, signal, time, stepsize):    for k, i in enumerate(t):        if i > time:            signal[k] = signal[k] + stepsize    return signaldef ramp_func(t, signal, start, slope):    step = t[1] - t[0]    it = 0    for k, i in enumerate(t):        if i > start:            it = it + 1            signal[k] = signal[k] + it * step * slope    return signaldef time_shift_scale(time, scale=1, shift=0):    time = time / scale    time = time - shift    return timedef time_sig_gen(start, end, no_of_points):    time = np.linspace(start, end, no_of_points)    signal = np.zeros(time.shape)    return time, signaldef f1(time, signal, i=0):    if i == 0:        stepfunc(time, signal, 0, 1)        stepfunc(time, signal, 3, -1)        signal_ = np.exp(-2 * time)        signal = np.multiply(signal_, signal)    else:        stepfunc(time, signal, 0, 1)        signal_ = np.exp(-2 * time)        signal = np.multiply(signal_, signal)    return signaldef f2(time, signal, i=0):    if i == 0:        stepfunc(time, signal, 2, 1)        stepfunc(time, signal, 6, -1)    else:        stepfunc(time, signal, 2, 1)    # signal_ = np.exp(-time)    # signal = np.multiply(signal_,signal)    return signaldef f3(time, signal):    stepfunc(time, signal, 0, 1)    f = 2 * 0.25 * 22 / 7    signal = np.cos(f * time) * (signal)    return signaldef convolution(x, h):    m = x.shape[0]    n = h.shape[0]    X = np.concatenate((x, np.zeros(n)))    H = np.concatenate((h, np.zeros(m)))    Y = np.zeros(n + m)    for i in range(n + m - 1):        Y[i] = 0        for j in range(m):            if (i - j + 1 > 0):                Y[i] = Y[i] + X[j] * H[i - j + 1]    return Yplt.figure(figsize=(8, 6), dpi=80)fig, axes = plt.subplots(nrows=3, ncols=1)fig.tight_layout()  ax = plt.subplot(3, 1, 1)plt.title("Step response of function f1")# plt.xlim([-10,10])time, signal = time_sig_gen(-10, 10, 100)signal_ = signal.copy()s = f1(time, signal)h = stepfunc(time, signal_, 0, 1)con = convolution(s, h)time = np.linspace(-20, 20, len(con))ax.plot(time, (con * 1 / 5))ax = plt.subplot(3, 1, 2)plt.title("Step response of function f2")time, signal = time_sig_gen(-10, 10, 100)# s = f2(time,signal)# ax.plot(time,s)signal_ = signal.copy()s = f2(time, signal)h = stepfunc(time, signal_, 0, 1)con = convolution(s, h)time = np.linspace(-20, 20, len(con))ax.plot(time, (con * 1 / 5))ax = plt.subplot(3, 1, 3)plt.title("Step response of function f3")time, signal = time_sig_gen(-10, 10, 1000)s = f3(time, signal)signal_ = signal.copy()h = stepfunc(time, signal_, 0, 1)con = convolution(s, h)time = np.linspace(-20, 20, len(con))ax.plot(time, (con * 0.01))plt.show()plt.figure(figsize=(8, 6), dpi=80)fig, axes = plt.subplots(nrows=3, ncols=1)fig.tight_layout()  # Or equivalently,  "plt.tight_layout()"ax = plt.subplot(3, 1, 1)plt.title("Plot of function f1")# plt.xlim([-10,10])time, signal = time_sig_gen(-10, 10, 100)signal_ = signal.copy()s = f1(time, signal)ax.plot(time, s)ax = plt.subplot(3, 1, 2)plt.title("Plot of function f2")time, signal = time_sig_gen(-10, 10, 100)s = f2(time, signal)ax.plot(time, s)ax = plt.subplot(3, 1, 3)plt.title("Plot of function f3")time, signal = time_sig_gen(-10, 10, 1000)s = f3(time, signal)ax.plot(time, s)plt.show()plt.figure(figsize=(8, 6), dpi=80)fig, axes = plt.subplots(nrows=3, ncols=1)fig.tight_layout()  # Or equivalently,  "plt.tight_layout()"ax = plt.subplot(3, 1, 1)plt.title("Step response of function f1(by hand)")# plt.xlim([-10,10])time, signal = time_sig_gen(-10, 10, 100)signal_ = signal.copy()s = f1(time, signal, i=1)h = stepfunc(time, signal_, 0, 1)con = convolution(s, h)con[130:] = con[130]time = np.linspace(-20, 20, len(con))ax.plot(time, (con * 1 / 5))ax = plt.subplot(3, 1, 2)plt.title("Step response of function f2(by hand)")time, signal = time_sig_gen(-10, 10, 100)# s = f2(time,signal)# ax.plot(time,s)signal_ = signal.copy()s = f2(time, signal, i=1)h = stepfunc(time, signal_, 0, 1)con = convolution(s, h)con[130:] = con[130]time = np.linspace(-20, 20, len(con))ax.plot(time, (con * 1 / 5))ax = plt.subplot(3, 1, 3)plt.title("Step response of function f3(by hand)")time, signal = time_sig_gen(-10, 10, 1000)s = f3(time, signal)signal_ = signal.copy()h = stepfunc(time, signal_, 0, 1)con = convolution(s, h)time = np.linspace(-20, 20, len(con))ax.plot(time, (con * 0.01))plt.show()