import numpy as np
import matplotlib.pyplot as plt
import scipy.signal as sig

plt.rcParams.update ({ 'font.size': 14}) 

steps = 1e-2 # Define step size
t = np. arange (0, 10 + steps , steps ) 

def func1(t): 
    y = np.cos(t)
    return y 


signal = np.zeros(t.shape)
def stepfunc(t,signal,time, stepsize):
    
    for k,i in enumerate(t) :
        if i > time :
            signal[k] = signal[k] + stepsize
            
    return signal

def ramp_func(t,signal,start,slope):


    step = t[1] - t[0]
    
    it = 0
    for k,i in enumerate(t) :
        
        if i > start :
            it = it+1
            signal[k] = signal[k] + it*step*slope
            
    return signal



def time_shift_scale(time,scale=1,shift = 0):
    time = time/scale
    time = time - shift
            
    return time

def time_sig_gen(start,end,no_of_points) :
    time = np.linspace(start,end,no_of_points)
    signal = np.zeros(time.shape)
    return time,signal
def f1(time,signal,i=0) :
    if i ==0 :
        stepfunc(time,signal,0, 1)
        stepfunc(time,signal,3, -1)
        signal_ = np.exp(-2*time)
        signal = np.multiply(signal_,signal)
    else :
        stepfunc(time,signal,0, 1)

        signal_ = np.exp(-2*time)
        signal = np.multiply(signal_,signal)
    return signal
def f2(time,signal,i = 0) :
    if i == 0 :
        stepfunc(time,signal,2, 1)
        stepfunc(time,signal,6, -1)
    else :
        stepfunc(time,signal,2, 1)

    return signal

def f3(time,signal) :
    stepfunc (time,signal,0,1)
    f = 2*0.25*22/7
    signal = np.cos(f*time)*(signal)    
    return signal


def convolution(x,h) :
    m=x.shape[0]
    n=h.shape[0]
    X=np.concatenate((x, np.zeros(n))) 
    H=np.concatenate((h, np.zeros(m)))
    Y = np.zeros(n+m)
    for i in range(n+m-1) :

        Y[i]=0
        for j in range(m) :
            if (i-j+1>0) :
                Y[i]=Y[i]+X[j]*H[i-j+1]
                
    return Y

time,signal = time_sig_gen(0,12/10000,1000) 
stepfunc(time,signal,0, 1)
signal = 10355.6*(np.exp(-5000*time))*(np.cos(18586*time))
plt.figure(figsize=(8, 6), dpi=80)
fig, axes = plt.subplots(nrows=3, ncols=1)
fig.tight_layout() 
ax = plt.subplot(2,1,1)
ax.plot(time*1000,signal)
plt.xlabel('Time [ms]')
plt.ylabel('Amplitude')
plt.title('Impulse response calculated in time domain')
plt.grid()
steps = 0.00001
t = np.arange (0, 1.2e-3+ steps , steps ) # This might already be defined in your code
num = [0, (10**4), 0] # Creates a matrix for the numerator
den = [1, (10**4), 37.4*(10**7)] # Creates a matrix for the denominator
tout , yout = sig.impulse (( num , den), T = t)
#plt.plot(tout*1000,yout)
#tout , yout = sig.step (( num , den), T = t)
ax = plt.subplot(2,1,2)
ax.plot(tout*1000,yout)
plt.xlabel('Time [ms]')
plt.ylabel('Amplitude')
plt.title('Impulse response calculated in time domain')
plt.grid()
plt.show()

from scipy import signal
import matplotlib.pyplot as plt
lti = signal.lti([0, (10**4), 0] , [1, (10**4), 37.4*(10**7)])
t, y = signal.step(lti)

plt.plot(t*1000, y)
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.title('Step response for 1. Order Lowpass')
plt.grid()
plt.show()