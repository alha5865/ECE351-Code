import numpy as np
import matplotlib.pyplot as plt
import scipy.fftpack

pi = 22/7
n= 3



def user_fun(x1,x,fs) :


    N = len(x) # find the length of the signal
    X_fft = scipy.fftpack.fft(x) # perform the fast Fourier transform (fft)
    X_fft_shifted = scipy.fftpack.fftshift ( X_fft ) # shift zero frequency components
    # to the center of the spectrum
    freq = np. arange (-N/2, N /2)*fs/N
    freq = freq/2# compute the frequencies for the output
    # signal , (fs is the sampling frequency and
    # needs to be defined previously in your code
    X_mag = np.abs( X_fft_shifted )/N # compute the magnitudes of the signal
    X_phi = np. angle ( X_fft_shifted ) # compute the phases of the signal

    a = (X_mag < 1e-10)*X_phi
    # ----- End of user defined function ----- #

    plt.figure(figsize=(8, 6), dpi=80)
    grid = plt.GridSpec(3, 2, wspace=1, hspace=1)
    plt.subplot(grid[0, :2])
    plt.title("User defined function( F(t) ---->)")
    plt.xlabel("t(s) --->")
    plt.xlim([0,2])
    plt.plot(x1,x)


    plt.subplot(grid[1, 1:])
    plt.xlabel("f(Hz) --->")
    plt.title("Closeup plot of Magnitude ")
#    plt.title("Magnitude Vs. frequency ")
    plt. stem (freq , X_mag )
    plt.xlim([-2,2])
    plt.subplot(grid[1, :1])
    plt.title("Magnitude Vs. frequency ")
#    plt.title("Closeup plot of Magnitude ")
    plt.xlabel("f(Hz) --->")
    plt. stem (freq , X_mag )
    plt.subplot(grid[2, 1:])
    plt.title("Closeup plot of phase ")
#    plt.title("Phase Vs. frequency")
    plt.xlabel("f(Hz) --->")
    plt. stem (freq , a )
    plt.xlim([-2,2])
    plt.subplot(grid[2, :1])
    plt.title("Phase Vs. frequency")
#    plt.title("Closeup plot of phase ")
    plt.xlabel("f(Hz) --->")
    plt. stem (freq , a)


def user_fun1(x1,x,fs,n=0) :


    N = len(x) # find the length of the signal
    X_fft = scipy.fftpack.fft(x) # perform the fast Fourier transform (fft)
    X_fft_shifted = scipy.fftpack.fftshift ( X_fft ) # shift zero frequency components
    # to the center of the spectrum
    freq = np. arange (-N/2, N /2)*fs/N
    freq = freq/2# compute the frequencies for the output
    # signal , (fs is the sampling frequency and
    # needs to be defined previously in your code
    X_mag = np.abs( X_fft_shifted )/N # compute the magnitudes of the signal
    X_phi = np. angle ( X_fft_shifted ) # compute the phases of the signal

    a = (X_mag > 1e-10)*X_phi
    # ----- End of user defined function ----- #

    plt.figure(figsize=(8, 6), dpi=80)
    grid = plt.GridSpec(3, 2, wspace=1, hspace=1)
    plt.subplot(grid[0, :2])
    plt.title("User defined function( F(t) ---->)")
    plt.xlabel("t(s) --->")
    if n == 0 :
        plt.xlim([0,2])
    plt.plot(x1,x)


    plt.subplot(grid[1, 1:])
    plt.xlabel("f(Hz) --->")
    plt.title("Magnitude Vs. frequency ")
    plt. stem (freq , X_mag )
    plt.xlim([-2,2])
    plt.subplot(grid[1, :1])
    plt.title("Closeup plot of Magnitude ")
    plt.xlabel("f(Hz) --->")
    plt. stem (freq , X_mag )
    plt.subplot(grid[2, 1:])
    plt.title("Magnitude Vs. phase")
    plt.xlabel("f(Hz) --->")
    plt. stem (freq , a )
    plt.xlim([-2,2])
    plt.subplot(grid[2, :1])
    plt.title("Closeup plot of phase ")
    plt.xlabel("f(Hz) --->")
    plt. stem (freq , a)
    plt.show()


t = np.linspace(0,20,1000)  
x_t = np.zeros(t.shape)
b = np.zeros(n)
for i in range(1,n) :
    b[i] = (2/(i*pi))*(1-np.cos(i*pi))
    
pi = 22/7
n= 10
T = 8

def my(t,n,T):    
    x_t = np.zeros(t.shape)
    b = np.zeros(n)
    for i in range(1,n) :
        b[i] = (2/(i*pi))*(1-np.cos(i*pi))
        x_t = b[i]*np.sin(i*((2*pi)/T)*t)+x_t
    return x_t







t= np.linspace(0,2,1000,endpoint=False)
x1= np.cos(2*np.pi*t)
fs = 100
x2 = 5*np.sin(2*np.pi*t)
x3 = (2*np.cos((2*2*np.pi*t)-2))+((np.sin((2*np.pi*6*t)+3))**2)
user_fun(t,x1,fs)
user_fun(t,x2,fs)
user_fun(t,x3,fs)
user_fun1(t,x1,fs)
user_fun1(t,x2,fs)
user_fun1(t,x3,fs)
t = np.linspace(0,16,1000)
user_fun1(t,my(t,8,T),fs,n=1)
